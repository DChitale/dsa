#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to heapify a subtree rooted at index `i`
void heapify(vector<int>& heap, int n, int i) {
    int largest = i; // Initialize largest as root
    int left = 2 * i + 1; // Left child index
    int right = 2 * i + 2; // Right child index

    // If left child is larger than root
    if (left < n && heap[left] > heap[largest]) {
        largest = left;
    }

    // If right child is larger than largest so far
    if (right < n && heap[right] > heap[largest]) {
        largest = right;
    }

    // If largest is not root
    if (largest != i) {
        swap(heap[i], heap[largest]);
        heapify(heap, n, largest); // Recursively heapify the affected subtree
    }
}

// Function to build a max-heap
void buildMaxHeap(vector<int>& heap) {
    int n = heap.size();
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(heap, n, i);
    }
}

// Function to get the next topper (root of max-heap)
int extractMax(vector<int>& heap) {
    int n = heap.size();
    if (n == 0) {
        cout << "Heap is empty!" << endl;
        return -1;
    }

    // Get the maximum element (root)
    int maxElement = heap[0];

    // Replace root with the last element
    heap[0] = heap[n - 1];
    heap.pop_back(); // Remove the last element

    // Heapify the root
    heapify(heap, heap.size(), 0);

    return maxElement;
}

// Function to perform Heap Sort (ascending order)
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // Build max-heap
    buildMaxHeap(arr);

    // Extract elements from the heap one by one
    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]); // Move current root to the end
        heapify(arr, i, 0);   // Call heapify on the reduced heap
    }
}

int main() {
    vector<int> grades;

    int n;
    cout << "Enter the number of students: ";
    cin >> n;

    cout << "Enter the grades of students:\n";
    for (int i = 0; i < n; ++i) {
        int grade;
        cin >> grade;
        grades.push_back(grade);
    }

    // Build max-heap
    buildMaxHeap(grades);

    // Extract the next topper
    cout << "Max-Heap built successfully. Extracting toppers:" << endl;
    while (!grades.empty()) {
        cout << "Next topper grade: " << extractMax(grades) << endl;
    }

    // Input grades again for sorting
    cout << "\nRe-enter the grades of students to sort:\n";
    grades.clear();
    for (int i = 0; i < n; ++i) {
        int grade;
        cin >> grade;
        grades.push_back(grade);
    }

    // Perform Heap Sort
    heapSort(grades);

    cout << "\nStudents' grades sorted in ascending order:\n";
    for (int grade : grades) {
        cout << grade << " ";
    }
    cout << endl;

    return 0;
}
