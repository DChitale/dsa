#include <iostream>
#include <queue> // For level-wise display
using namespace std;

// Define the structure of a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Define the Binary Search Tree (BST) class
class BST {
private:
    Node* root;

    // Helper function for in-order traversal
    void inOrderHelper(Node* node) {
        if (node == nullptr) return;
        inOrderHelper(node->left);
        cout << node->data << " ";
        inOrderHelper(node->right);
    }

    // Helper function for inserting a node
    Node* insertHelper(Node* node, int data) {
        if (node == nullptr) {
            return new Node(data);
        }
        if (data < node->data) {
            node->left = insertHelper(node->left, data);
        } else {
            node->right = insertHelper(node->right, data);
        }
        return node;
    }

    // Helper function for searching a node
    bool searchHelper(Node* node, int key) {
        if (node == nullptr) return false;
        if (node->data == key) return true;
        if (key < node->data) return searchHelper(node->left, key);
        return searchHelper(node->right, key);
    }

    // Helper function for finding the height of the tree
    int findHeightHelper(Node* node) {
        if (node == nullptr) return -1;
        int leftHeight = findHeightHelper(node->left);
        int rightHeight = findHeightHelper(node->right);
        return max(leftHeight, rightHeight) + 1;
    }

    // Helper function for level-wise display
    void levelWiseDisplayHelper(Node* node) {
        if (node == nullptr) return;
        queue<Node*> q;
        q.push(node);
        while (!q.empty()) {
            Node* current = q.front();
            q.pop();
            cout << current->data << " ";
            if (current->left != nullptr) q.push(current->left);
            if (current->right != nullptr) q.push(current->right);
        }
        cout << endl;
    }

    // Helper function to find the minimum value node
    Node* findMin(Node* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    // Helper function for deleting a node
    Node* deleteHelper(Node* node, int key) {
        if (node == nullptr) return node;

        if (key < node->data) {
            node->left = deleteHelper(node->left, key);
        } else if (key > node->data) {
            node->right = deleteHelper(node->right, key);
        } else {
            // Node with one child or no child
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }
            // Node with two children
            Node* temp = findMin(node->right);
            node->data = temp->data;
            node->right = deleteHelper(node->right, temp->data);
        }
        return node;
    }

    // Helper function for mirroring the tree
    void mirrorHelper(Node* node) {
        if (node == nullptr) return;
        swap(node->left, node->right);
        mirrorHelper(node->left);
        mirrorHelper(node->right);
    }

public:
    // Constructor to initialize the root
    BST() : root(nullptr) {}

    // Function to insert a node
    void insert(int data) {
        root = insertHelper(root, data);
    }

    // Function for in-order traversal
    void inOrder() {
        inOrderHelper(root);
        cout << endl;
    }

    // Function to search for a node
    bool search(int key) {
        return searchHelper(root, key);
    }

    // Function to find the height of the tree
    int findHeight() {
        return findHeightHelper(root);
    }

    // Function for level-wise display
    void levelWiseDisplay() {
        levelWiseDisplayHelper(root);
    }

    // Function to delete a node
    void deleteNode(int key) {
        root = deleteHelper(root, key);
    }

    // Function to create a mirror of the tree
    void mirror() {
        mirrorHelper(root);
    }
};

// Main function to test the BST
int main() {
    BST tree;
    int choice, value;

    while (true) {
        cout << "\n1. Insert\n2. Display In-order\n3. Search\n4. Find Height\n5. Level-wise Display\n6. Delete\n7. Mirror\n8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                tree.insert(value);
                break;
            case 2:
                cout << "In-order Traversal: ";
                tree.inOrder();
                break;
            case 3:
                cout << "Enter value to search: ";
                cin >> value;
                if (tree.search(value))
                    cout << "Value found in the BST.\n";
                else
                    cout << "Value not found.\n";
                break;
            case 4:
                cout << "Height of the tree: " << tree.findHeight() << endl;
                break;
            case 5:
                cout << "Level-wise Display: ";
                tree.levelWiseDisplay();
                break;
            case 6:
                cout << "Enter value to delete: ";
                cin >> value;
                tree.deleteNode(value);
                break;
            case 7:
                tree.mirror();
                cout << "Tree has been mirrored.\n";
                break;
            case 8:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    }
    return 0;
}
